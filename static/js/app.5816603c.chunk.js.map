{"version":3,"sources":["constants/Colors.js","components/TabBarIcon.js","screens/DetailScreen.js","Context.js","screens/TodoScreen.js","screens/AddTaskScreen.js","components/TabBarLabel.js","navigation/BottomTabNavigator.js","App.js","navigation/useLinking.js","web-build/register-service-worker.js","assets/fonts/SpaceMono-Regular.ttf"],"names":["TabBarIcon","props","Ionicons","name","size","style","marginBottom","color","focused","Colors","DetailScreen","undefined","route","params","Button","title","onPress","navigation","goBack","Text","task","text","details","ThemeContext","React","createContext","theme","setTaskCount","taskCount","Stack","createStackNavigator","Task","navigate","item","completeTask","removeTask","confirming","setConfirming","styles","card","TouchableOpacity","push","View","todoView","checked","completed","position","right","deleteButton","confirmingText","marginRight","TodoScreen","Navigator","screenOptions","headerShown","Screen","component","TodoListScreen","focusListener","state","todoList","addListener","componentGainsFocus","fetch","headers","API","then","res","json","body","console","log","setState","todo","context","length","this","currentList","removeListener","updateTaskList","method","Accept","JSON","stringify","removed","filter","v","i","status","updated","container","contentContainerStyle","contentContainer","map","index","key","addTask","contextType","navigationOptions","header","StyleSheet","create","padding","addTaskText","borderRadius","backgroundColor","width","display","flex","flexDirection","alignItems","developmentModeText","fontSize","lineHeight","textAlign","paddingTop","welcomeContainer","marginTop","welcomeImage","height","resizeMode","marginLeft","getStartedContainer","marginHorizontal","homeScreenFilename","marginVertical","codeHighlightText","codeHighlightContainer","paddingHorizontal","getStartedText","tabBarInfoContainer","bottom","left","Platform","select","ios","shadowColor","shadowOffset","shadowOpacity","shadowRadius","android","elevation","paddingVertical","tabBarInfoText","navigationFilename","helpContainer","helpLink","helpLinkText","radioProps","label","value","AddTaskScreen","submitDisabled","taskText","taskPriority","priority","response","added","placeholder","onChangeText","handleTextInput","priorityRow","labelText","radio_props","initial","formHorizontal","labelHorizontal","disabled","handleCreateTask","optionIconContainer","option","borderWidth","hairlineWidth","borderBottomWidth","borderColor","lastOption","optionText","alignSelf","tabBarLabel","paddingBottom","tabBarLabelActive","BottomTab","createMaterialBottomTabNavigator","BottomTabNavigator","setOptions","headerTitle","getHeaderTitle","Consumer","initialRouteName","options","tabBarIcon","tabBarBadge","routes","App","isLoadingComplete","setLoadingComplete","initialNavigationState","setInitialNavigationState","containerRef","tasks","setTheme","getInitialState","useLinking","prefixes","Linking","makeUrl","config","Root","path","screens","Add","Todo","TodoList","Detail","Settings","a","async","SplashScreen","preventAutoHide","Font","font","require","warn","hide","skipLoadingScreen","outer","Provider","OS","StatusBar","barStyle","NavigationContainer","ref","initialState","maxWidth","navigator","window","addEventListener","serviceWorker","register","scope","info","catch","error","module","exports"],"mappings":"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","file":"static/js/app.5816603c.chunk.js","sourcesContent":["const tintColor = '#2f95dc';\n\nexport default {\n  tintColor,\n  tabIconDefault: '#ccc',\n  tabIconSelected: tintColor,\n  tabBar: '#fefefe',\n  errorBackground: 'red',\n  errorText: '#fff',\n  warningBackground: '#EAEB5E',\n  warningText: '#666804',\n  noticeBackground: tintColor,\n  noticeText: '#fff'\n}\n","import { Ionicons } from '@expo/vector-icons'\nimport * as React from 'react'\n\nimport Colors from '../constants/Colors'\n\nexport default function TabBarIcon (props) {\n  return (\n    <Ionicons\n      name={props.name}\n      size={30}\n      style={{ marginBottom: -3 }}\n      color={props.focused ? Colors.tabIconSelected : Colors.tabIconDefault}\n    />\n  )\n}\n","import React from 'react'\r\nimport { Text, Button } from 'react-native'\r\n\r\nexport default function DetailScreen (props) {\r\n  if (props.route.params === undefined) {\r\n    return <></>\r\n  } else {\r\n    return (\r\n      <>\r\n        <Button title=\"Back\" onPress={() => props.navigation.goBack()}></Button>\r\n        <Text>{props.route.params.task.text}</Text>\r\n        <Text>{props.route.params.task.details}</Text>\r\n      </>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nexport const ThemeContext = React.createContext({\r\n  theme:'light', \r\n  setTaskCount: () => {}, \r\n  taskCount: 0 });\r\n","import * as WebBrowser from 'expo-web-browser'\nimport * as React from 'react'\nimport { Button, Platform, StyleSheet, Text, TouchableOpacity, View } from 'react-native'\nimport { CheckBox } from 'react-native-elements'\nimport { ScrollView } from 'react-native-gesture-handler'\nimport DetailScreen from './DetailScreen'\nimport { createStackNavigator } from '@react-navigation/stack'\nimport { Card } from 'react-native-material-ui';\nimport { Ionicons } from '@expo/vector-icons'\nimport {ThemeContext} from '../Context';\n\nconst Stack = createStackNavigator()\n\nfunction Task({navigate,item,completeTask,removeTask}) {\n  let [confirming, setConfirming] = React.useState(false)\n  return (\n  <Card style={styles.card}>\n    <TouchableOpacity onPress={() => navigate.push('Detail', { task: item })} >\n      <View style={styles.todoView}>\n          <CheckBox\n            checked={item.completed}\n            onPress={() => completeTask()}\n            />\n            <Text>{item.text} {item.completed ? 'COMPLETED' : ''}\n            </Text>\n          <View style={{ position: 'absolute', right: 0 }}>\n            <TouchableOpacity style={[styles.deleteButton, \n              confirming && styles.confirming]} \n              onPress={() => !confirming ? setConfirming(true) : removeTask()}>\n                {confirming ?\n                   <Text style={styles.confirmingText}>Delete</Text>\n                  : <Ionicons name=\"ios-close\" size={30} style={{marginRight: 10}}/>}\n              </TouchableOpacity>\n          </View>\n      </View>\n    </TouchableOpacity>\n  </Card>)\n}\n\nexport default function TodoScreen () {\n  return (\n    <Stack.Navigator screenOptions={{\n      headerShown: false\n    }}>\n      <Stack.Screen name=\"TodoList\" component={TodoListScreen} />\n      <Stack.Screen name=\"Detail\" component={DetailScreen} />\n    </Stack.Navigator>\n  )\n}\n\nclass TodoListScreen extends React.Component {\n  constructor (props) {\n    super(props)\n    this.focusListener = undefined\n    this.state = { todoList: [] }\n    this.focusListener = props.navigation.addListener('focus',\n      () => this.componentGainsFocus())\n  }\n\n  updateTaskList () {\n    fetch('https://plato.mrl.ai:8081/todo', {\n      headers: {\n        API: 'murray'\n      }\n    })\n      .then(res => res.json())\n      .then(body => {\n        console.log(body)\n        this.setState({ todoList: body.todo })\n        this.context.setTaskCount(body.todo.length)\n      })\n  }\n\n  componentGainsFocus () {\n    if (this.props.route.params !== undefined) {\n      const { task } = this.props.route.params\n\n      console.log('Has focus')\n      console.log(task)\n      let currentList = this.state.todoList\n      // Option 1: Push\n      // currentList.push(task)\n      currentList = [...this.state.todoList, task]\n      this.setState({ todoList: currentList })\n      this.context.setTaskCount(currentList.length)\n      // this.updateTaskList()\n    }\n  }\n\n  componentWillUnmount () {\n    this.props.navigation.removeListener('focus', this.componentGainsFocus)\n  }\n\n  componentDidMount () {\n    this.updateTaskList()\n  }\n\n  removeTask (position) {\n    console.log(position)\n    fetch('https://plato.mrl.ai:8081/todo/remove', {\n      method: 'POST',\n      headers: {\n        API: 'murray',\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify({ position: position })\n    })\n      .then(res => res.json())\n      .then(body => {\n        console.log(body)\n        if (body.removed != undefined) {\n          const currentList = this.state.todoList.filter((v, i) =>\n            (i !== position))\n          this.setState({ todoList: currentList })\n          this.context.setTaskCount(currentList.length)\n        }\n        // this.setState({todoList:body.todo})\n      })\n  }\n\n  // Implement  completing the task on the server\n  completeTask (position, state) {\n    fetch('https://plato.mrl.ai:8081/todo/setState', {\n      method: 'POST',\n      headers: {\n        API: 'murray',\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify(\n        {\n          position: position,\n          status: state\n        })\n    })\n      .then(res => res.json())\n      .then(body => {\n        console.log(body)\n        if (body.updated != undefined) {\n          const currentList = [...this.state.todoList]\n          currentList[position].completed = state\n          this.setState({ todoList: currentList })\n          this.context.setTaskCount(currentList.length)\n        }\n        // this.setState({todoList:body.todo})\n      })\n  }\n\n  render () {\n    \n    return (\n      <View style={styles.container}>\n        <ScrollView style={styles.container} contentContainerStyle={styles.contentContainer}>\n          {this.state.todoList.map((item, index) =>\n            <Task key={index} index={index} \n              navigate={this.props.navigation} \n              item={item}\n              completeTask={() => this.completeTask(index, !item.completed)} \n              removeTask={() => this.removeTask(index)}/>\n          )}\n        </ScrollView>\n        <View>\n        <TouchableOpacity style={styles.addTask}\n          onPress={() => this.props.navigation.navigate('Add')}>\n            <Text>New Task\n              </Text></TouchableOpacity>\n        </View>\n      </View>\n    )\n  }\n}\nTodoListScreen.contextType = ThemeContext; \n\nTodoScreen.navigationOptions = {\n  header: null\n}\n\nfunction DevelopmentModeNotice () {\n  if (__DEV__) {\n    const learnMoreButton = (\n      <Text onPress={handleLearnMorePress} style={styles.helpLinkText}>\n        Learn more\n      </Text>\n    )\n\n    return (\n      <Text style={styles.developmentModeText}>\n        Development mode is enabled: your app will be slower but you can use useful development\n        tools. {learnMoreButton}\n      </Text>\n    )\n  } else {\n    return (\n      <Text style={styles.developmentModeText}>\n        You are not in development mode: your app will run at full speed.\n      </Text>\n    )\n  }\n}\n\nfunction handleLearnMorePress () {\n  WebBrowser.openBrowserAsync('https://docs.expo.io/versions/latest/workflow/development-mode/')\n}\n\nfunction handleHelpPress () {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/versions/latest/get-started/create-a-new-app/#making-your-first-change'\n  )\n}\n\nconst styles = StyleSheet.create({\n  addTask: {\n    padding: 10,\n  },\n  addTaskText: {\n  },\n  deleteButton: {\n    padding: 10,\n    borderRadius: 15\n  },\n  confirming: {\n    backgroundColor: 'red'\n  },\n  confirmingText: {\n    color: 'white',\n  },\n  todoView: {\n    width: '100%',\n    display: 'block'\n  },\n  todoView: {\n    flex: 1,\n    flexDirection: 'row',\n    backgroundColor: '#fff',\n    alignItems: 'center'\n  },\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n  developmentModeText: {\n    marginBottom: 20,\n    color: 'rgba(0,0,0,0.4)',\n    fontSize: 14,\n    lineHeight: 19,\n    textAlign: 'center'\n  },\n  contentContainer: {\n    paddingTop: 30,\n  },\n  welcomeContainer: {\n    alignItems: 'center',\n    marginTop: 10,\n    marginBottom: 20\n  },\n  welcomeImage: {\n    width: 100,\n    height: 80,\n    resizeMode: 'contain',\n    marginTop: 3,\n    marginLeft: -10\n  },\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50\n  },\n  homeScreenFilename: {\n    marginVertical: 7\n  },\n  codeHighlightText: {\n    color: 'rgba(96,100,109, 0.8)'\n  },\n  codeHighlightContainer: {\n    backgroundColor: 'rgba(0,0,0,0.05)',\n    borderRadius: 3,\n    paddingHorizontal: 4\n  },\n  getStartedText: {\n    fontSize: 17,\n    color: 'rgba(96,100,109, 1)',\n    lineHeight: 24,\n    textAlign: 'center'\n  },\n  tabBarInfoContainer: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    ...Platform.select({\n      ios: {\n        shadowColor: 'black',\n        shadowOffset: { width: 0, height: -3 },\n        shadowOpacity: 0.1,\n        shadowRadius: 3\n      },\n      android: {\n        elevation: 20\n      }\n    }),\n    alignItems: 'center',\n    backgroundColor: '#fbfbfb',\n    paddingVertical: 20\n  },\n  tabBarInfoText: {\n    fontSize: 17,\n    color: 'rgba(96,100,109, 1)',\n    textAlign: 'center'\n  },\n  navigationFilename: {\n    marginTop: 5\n  },\n  helpContainer: {\n    marginTop: 15,\n    alignItems: 'center'\n  },\n  helpLink: {\n    paddingVertical: 15\n  },\n  helpLinkText: {\n    fontSize: 14,\n    color: '#2e78b7'\n  }\n})\n","import * as React from 'react'\nimport { StyleSheet, Text, View } from 'react-native'\nimport { ScrollView } from 'react-native-gesture-handler'\nimport { Input, Button } from 'react-native-elements'\nimport RadioForm, {} from 'react-native-simple-radio-button'\n\nconst radioProps = [\n  { label: '1', value: 0 },\n  { label: '2', value: 1 },\n  { label: '3', value: 3 }\n]\n\nexport default class AddTaskScreen extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      submitDisabled: true,\n      taskText: '',\n      taskPriority: 0\n    }\n  }\n\n  handleTextInput (text) {\n    if (text.length > 0) {\n      this.setState(\n        {\n          submitDisabled: false,\n          taskText: text\n        })\n    } else {\n      this.setState({ submitDisabled: true })\n      console.log(text)\n    }\n  }\n\n  handleCreateTask () {\n    console.log('Added!')\n    console.log(this.state.taskText, this.state.taskPriority)\n    fetch('https://plato.mrl.ai:8081/todo/add', {\n      method: 'POST',\n      headers: {\n        API: 'murray',\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify(\n        {\n          text: this.state.taskText,\n          priority: this.state.taskPriority\n        })\n    })\n      .then(response => response.json())\n      .then(body => {\n        console.log(body)\n        if (body.added !== undefined) {\n          console.log('Successfully added task!')\n          this.props.navigation.navigate('TodoList',\n            {\n              task:\n              {\n                text: this.state.taskText,\n                priority: this.state.taskPriority\n              }\n            })\n        } else {\n          console.log('Error adding task')\n        }\n        // this.setState({todoList:body.todo})\n      })\n  }\n\n  handlePriorityInput () {\n\n  }\n\n  render () {\n    return (\n      <ScrollView style={styles.container} contentContainerStyle={styles.contentContainer}>\n        <Input placeholder=\"e.g. Complete Final Project for DIG4639\"\n          onChangeText={text => this.handleTextInput(text)} />\n        <View style={styles.priorityRow}>\n          <Text style={styles.labelText}>Priority:</Text>\n          <RadioForm\n            radio_props={radioProps}\n            initial={0}\n            formHorizontal={true}\n            labelHorizontal={false}\n            onPress={(value) => { this.setState({ taskPriority: value }) }}\n          />\n        </View>\n        <Button title=\"Create Task\"\n          disabled={this.state.submitDisabled}\n          onPress={() => this.handleCreateTask()}/>\n      </ScrollView>\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  labelText: {\n    fontSize: 25\n  },\n  priorityRow: {\n    flex: 1,\n    alignItems: 'center',\n    paddingTop: 25,\n    flexDirection: 'row',\n    backgroundColor: '#fafafa'\n  },\n  container: {\n    flex: 1,\n    backgroundColor: '#fafafa',\n  },\n  contentContainer: {\n    paddingTop: 15\n  },\n  optionIconContainer: {\n    marginRight: 12\n  },\n  option: {\n    backgroundColor: '#fdfdfd',\n    paddingHorizontal: 15,\n    paddingVertical: 15,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderBottomWidth: 0,\n    borderColor: '#ededed'\n  },\n  lastOption: {\n    borderBottomWidth: StyleSheet.hairlineWidth\n  },\n  optionText: {\n    fontSize: 15,\n    alignSelf: 'flex-start',\n    marginTop: 1\n  }\n})\n","import * as React from 'react'\nimport { Text, StyleSheet } from 'react-native'\nimport Colors from '../constants/Colors'\n\nexport default function TabBarLabel (props) {\n  return (\n    <Text\n      size={30}\n      style={[styles.tabBarLabel,\n        props.focused ? styles.tabBarLabelActive : {}\n      ]}\n    >{props.title}</Text>\n  )\n}\n\nconst styles = StyleSheet.create({\n  tabBarLabel: {\n    paddingBottom: 6,\n    fontSize: 10,\n    textAlign: 'center'\n\n  },\n  tabBarLabelActive: {\n    color: Colors.tabIconSelected\n  }\n})\n","import { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\nimport * as React from 'react';\nimport { View } from 'react-native';\n\nimport TabBarIcon from '../components/TabBarIcon';\nimport TodoScreen from '../screens/TodoScreen';\nimport AddTaskScreen from '../screens/AddTaskScreen';\nimport DetailScreen from '../screens/DetailScreen';\nimport TabBarLabel from '../components/TabBarLabel';\nimport { ThemeContext } from '../Context';\n\nconst BottomTab = createMaterialBottomTabNavigator(\n);\nconst INITIAL_ROUTE_NAME = 'Todo';\nimport { withBadge, Badge } from 'react-native-elements';\n\nexport default function BottomTabNavigator({ navigation, route }) {\n  // Set the header title on the parent stack navigator depending on the\n  // currently active tab. Learn more in the documentation:\n  // https://reactnavigation.org/docs/en/screen-options-resolution.html\n  navigation.setOptions({ headerTitle: getHeaderTitle(route) });\n\n  return (\n    <ThemeContext.Consumer>\n      {({taskCount}) =>\n    <BottomTab.Navigator initialRouteName={INITIAL_ROUTE_NAME}>\n      <BottomTab.Screen\n        name=\"Todo\"\n        component={TodoScreen}\n        title=\"Todo List\"\n        options={{\n          title: 'Todo List',\n          tabBarIcon: ({ focused }) => <TabBarIcon focused={focused} name=\"ios-list\" />,\n          tabBarBadge: taskCount // tabBarLabel: ({ focused }) => <TabBarLabel title={'Todo List'} focused={focused} />,\n        }}\n        />\n      <BottomTab.Screen\n        name=\"Add\"\n        component={AddTaskScreen}\n        title= 'Add Task'\n        options={{\n          title: 'Add Task',\n          tabBarIcon: ({ focused }) => <TabBarIcon focused={focused} name=\"ios-add\" />,\n          // tabBarLabel: ({ focused }) => <TabBarLabel title={'Add Task'} focused={focused} />,\n        }}\n        />\n    </BottomTab.Navigator>\n    }\n    </ThemeContext.Consumer>\n  );\n}\n\nfunction getHeaderTitle(route) {\n  const routeName = route.state?.routes[route.state.index]?.name ?? INITIAL_ROUTE_NAME;\n\n  switch (routeName) {\n    case 'Todo':\n      return 'Todo List:';\n    case 'Add':\n      return 'Create a new Task:';\n    case 'Detail':\n      return 'Task details:';\n  }\n}\n","import * as React from 'react'\nimport { Platform, StatusBar, StyleSheet, View } from 'react-native'\nimport { SplashScreen } from 'expo'\nimport * as Font from 'expo-font'\nimport { Ionicons } from '@expo/vector-icons'\nimport { NavigationContainer } from '@react-navigation/native'\nimport { createStackNavigator } from '@react-navigation/stack'\n\nimport BottomTabNavigator from './navigation/BottomTabNavigator'\nimport useLinking from './navigation/useLinking'\nimport {ThemeContext} from './Context'\nconst Stack = createStackNavigator()\n\nexport default function App (props) {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false)\n  const [initialNavigationState, setInitialNavigationState] = React.useState()\n  const containerRef = React.useRef()\n  let setTaskCount = (tasks => setTheme({\n    setTaskCount: setTaskCount, \n    taskCount:tasks})) \n  const [theme, setTheme] = React.useState({\n    theme:'light', \n    setTaskCount: setTaskCount, \n    taskCount: 0 })\n  const { getInitialState } = useLinking(containerRef)\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync () {\n      try {\n        SplashScreen.preventAutoHide()\n\n        // Load our initial navigation state\n        setInitialNavigationState(await getInitialState())\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('./assets/fonts/SpaceMono-Regular.ttf')\n        })\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e)\n      } finally {\n        setLoadingComplete(true)\n        SplashScreen.hide()\n      }\n    }\n\n    loadResourcesAndDataAsync()\n  }, [])\n\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return null\n  } else {\n    return (\n        <View style={styles.outer}>\n          <View style={styles.container}>\n            <ThemeContext.Provider value={theme}>\n              {Platform.OS === 'ios' && <StatusBar barStyle=\"default\" />}\n              <NavigationContainer ref={containerRef} initialState={initialNavigationState}>\n                <Stack.Navigator>\n                  <Stack.Screen name=\"Root\" component={BottomTabNavigator} />\n                </Stack.Navigator>\n              </NavigationContainer>\n            </ThemeContext.Provider>\n          </View>\n        </View>\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  outer: {\n    flex:1,\n    flexDirection: 'row',\n  },\n  container: {\n    flex: 1,\n    maxWidth:800,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    backgroundColor: '#fff'\n  }\n})\n","import { useLinking } from '@react-navigation/native'\nimport { Linking } from 'expo'\n\nexport default function (containerRef) {\n  return useLinking(containerRef, {\n    prefixes: [Linking.makeUrl('/RN-TodoApp')],\n    config: {\n      Root: {\n        path: 'RN-TodoApp',\n        screens: {\n          Add: 'RN-TodoApp/add',\n          Todo: {\n            path: 'RN-TodoApp/todoStack',\n            screens: {\n              TodoList: 'RN-TodoApp/todo',\n              Detail: 'RN-TodoApp/detail',\n            }\n          },\n          Settings: 'RN-TodoApp/settings'\n        }\n      }\n    }\n  })\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/RN-TodoApp/expo-service-worker.js', { scope: '/RN-TodoApp/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}